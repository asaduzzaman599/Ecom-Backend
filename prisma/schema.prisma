// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String  @id @default(uuid())
  email    String? @unique
  phone    String  @unique
  password String
  role     Role    @default(Customer)

  requiredPasswordChange Boolean? @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model User {
  id          String       @id @default(uuid())
  email       String?      @unique
  phone       String       @unique
  firstName   String?
  lastName    String?
  role        Role         @default(Customer)
  userSetting UserSetting?

  auth   Auth?
  orders Order[]

  attachmentId String? @unique
  attachment Attachment? @relation(fields: [attachmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

enum Role {
  SuperAdmin
  Admin
  Customer
}

model UserSetting {
  id           String           @id @default(uuid())
  title        String           @unique
  internalName String           @unique
  stringValue  String
  numberValue  Int
  booleanValue Boolean          @default(false)
  valueType    SettingValueType
  isActive     Boolean          @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommonSetting {
  id           String           @id @default(uuid())
  title        String           @unique
  internalName String           @unique
  stringValue  String
  numberValue  Int
  booleanValue Boolean          @default(false)
  valueType    SettingValueType
  isActive     Boolean          @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SettingValueType {
  NumberValue
  BooleanValue
  stringValue
}

model Type {
  id    String @id @default(uuid())
  title String
  imageUrl String?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  category Category[]
  goods    Goods[]
}

model Category {
  id    String @id @default(uuid())
  title String
  imageUrl String?

  typeId String?
  type   Type?   @relation(fields: [typeId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  subCategory SubCategory[]
  goods       Goods[]
}

model SubCategory {
  id    String @id @default(uuid())
  title String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  goods Goods[]
}

model Group {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  goods GroupsOnGoods[]
}

model GroupsOnGoods {
  goodId  String
  goods   Goods  @relation(fields: [goodId], references: [id])
  groupId String
  groups  Group  @relation(fields: [groupId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  @@id([goodId, groupId])
}

model Goods {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrls   String[]
  price       Float
  isActive    Boolean  @default(true)

  typeId String?
  type   Type?   @relation(fields: [typeId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  subCategoryId String?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])

  attachments GoodsAttachement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  groups GroupsOnGoods[]

  stocks Stock[]
}

model GoodsAttachement {
  goodsId String
  goods   Goods  @relation(fields: [goodsId], references: [id])

  attachmentId String     @unique
  attacment    Attachment @relation(fields: [attachmentId], references: [id])

  @@id([goodsId, attachmentId])
}


model Stock {
  id          String  @id @default(uuid())
  size        Size    @default(NONE)
  color       String?
  description String?
  quantity    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  goodId String
  good   Goods  @relation(fields: [goodId], references: [id])

  orderItems OrderItem[]
}

enum Size {
  S
  M
  L
  XL
  XXL
  NONE
}

model Order {
  id  String @unique @default(uuid())
  oId String @unique

  status OrderStatus @default(INREVIEW)

  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  deliveryInfoId String @unique
  deliveryInfo  DeliveryInfo  @relation(fields: [deliveryInfoId], references: [id])

  paymentInfoId String @unique
  paymentInfo  PaymentInfo  @relation(fields: [paymentInfoId], references: [id])

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model OrderItem {
  id  String @unique @default(uuid())

  quantity Int @default(0)
  price Float @default(0)
  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id])

  orderId String
  order  Order  @relation(fields: [orderId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

enum OrderStatus {
  INREVIEW
  INPROGRESS
  OUTFORDELIVERY
  DELIVERED
  CANCELLED
  REJECTED
  FAILED
}

model DeliveryInfo {
  id      String @unique @default(uuid())
  address String
  phone   String

  order Order?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model PaymentInfo {
  id      String @unique @default(uuid())
  additionalCharge Float  @default(0)
  
  paymentMethodId String 
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])


  order Order?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model PaymentMethod {
  id String @unique @default(uuid())
  type PaymentType @default(COD)
  charge Float @default(0)
  description String

  paymentInfo PaymentInfo[]

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

enum PaymentType {
  COD
}

model Attachment {
  id           String @unique @default(uuid())
  attachmentId String
  fileId       String
  extension    String
  mimetype     String

  goodAtachment GoodsAttachement?
  profile       User?

  createdBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}
